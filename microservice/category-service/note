pip install flask
pip install flask-restful
pip install flask-cors
pip install flask-sqlalchemy
pip install pyscopg2
pip install flask-migrate
pip install kafka-python
pip list


sudo apt install uvicorn
uvicorn app.main:app --host localhost --port 8085 --reload
http://127.0.0.1:8085/docs


owner = relationship("User",back_populates="jobs")
Django-ORM (part of the Django framework)
SessionLocal class will be a database session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
SQLAlchemy and many others are by default "lazy loading".
Pydantic models / schemas ->  creating or reading data

class User(Base):
    __tablename__ = "users"
id = Column(Integer, primary_key=True, index=True)

class ItemBase(BaseModel):
    title: str
    description: Union[str, None] = None
    items: List[Item] = []

name = Column(String) -> name: str

==>Read
class Item(ItemBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True


class User(UserBase):
    id: int
    is_active: bool
    items: List[Item] = []

    class Config:
        orm_mode = True (id = data.id)



==>Get By Id
def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

==>Get by email
def get_user_by_email(db: Session, email: str):
    return db.query(models.User).filter(models.User.email == email).first()

==>Get list
def get_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.User).offset(skip).limit(limit).all()

==>Create
def create_user(db: Session, user: schemas.UserCreate):
    fake_hashed_password = user.password + "notreallyhashed"
    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

==>Create Table
models.Base.metadata.create_all(bind=engine)

==>POST
from fastapi import Depends, FastAPI, HTTPException

@app.post("/users/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return crud.create_user(db=db, user=user)

==>GET
@app.get("/users/", response_model=List[schemas.User])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    users = crud.get_users(db, skip=skip, limit=limit)
    return users


@app.get("/users/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user


main -> controller
crud -> service
model
schema


https://codevoweb.com/crud-restful-api-server-with-python-fastapi-and-postgresql/
https://github.com/wpcodevo/python_fastapi
https://fastapi.tiangolo.com/tutorial/sql-databases/
https://fastapi.tiangolo.com/deployment/docker/


