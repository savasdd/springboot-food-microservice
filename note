
* admin keycloak üzerinden login olup token alacak
* admin rolunda python rest api üzerinden kategoriler girilecek
* kategori girince loglar logs servisine iletilip kayıt edilecek
* admin rolu yemekleri kategori bazında girecek, eş zamanlı stok servisine ve account servisine de
  kayıt düşecek.
* yemekler girilirken loglar logs servisine iletilecek
* user rolu yemekleri foods servisi ile listeleyecek, seçim yaparken adet bilgisi stock servisine  
  iletilecek var/yok durumu notification ile bildirilecek
* user rolu seçilen ürünlere göre ödeme safyasına gidecek. Ödeme sayfası account servisine göre   
  stock kontrol edilip notification ile bildirilecek
* ödeme yapılıp bilgilendirme yapılacak
* servisler arası tüm iletişim kafka üzerinden yürütülecek
* servis durumları zipkin üzerinden takip edilecek. 


http://localhost:8761/


python discovery: https://stackabuse.com/spring-boot-and-flask-microservices-eureka-client/
crud            : https://betterprogramming.pub/crud-api-with-flask-and-postgresql-15548d9ee48e
notification    : https://devnot.com/2020/mikroservis-yaklasiminda-servisler-arasi-iletisim-mimarileri/ 


==>mysql config:
docker exec -it mysql_db bash
mysql -uroot -p
show databases;
select user,host from mysql.user;
update mysql.user set host='%' where user='root';


==>saga pattern
https://www.youtube.com/watch?v=pUFGOngzJig&ab_channel=DailyCodeBuffer
https://medium.com/@bilgehan.yildiz/axon-framework-kullanarak-spring-boot-i%CC%87le-cqrs-pattern-i%CC%87mplementasyonu-part-1-85fc5e15acd8
https://www.youtube.com/watch?v=aOen1-pQLZg&ab_channel=JavaTechie

Transactions in Microservices with Kafka Streams:
https://piotrminkowski.com/2022/01/24/distributed-transactions-in-microservices-with-kafka-streams-and-spring-boot/ *
